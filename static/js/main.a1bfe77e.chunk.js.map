{"version":3,"sources":["components/AboutDiv.js","components/QTForm.js","components/QT2KForm.js","components/QTLForm.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["AboutDiv","React","createElement","id","style","borderRight","marginRight","paddingRight","textAlign","data-testid","color","href","QTForm","inCount","setInCount","useState","name","value","onChange","e","parseInt","target","type","min","max","mpnList","getQtMpn","length","data-test-id","mpn","QTLForm","in2KL","setIn2KL","in2KS","setIn2KS","size","mpn2KList","getQt2KMpn","mpn2K","QT2KForm","inLarge","setInLarge","inSmall","setInSmall","marginLeft","width","mpnLList","getQtLegio","mpnL","AppContainer","className","display","gridTemplateColumns","gridGap","paddingLeft","paddingTop","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a1bfe77e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function AboutDiv() {\n  return (\n    <div\n      id=\"aboutdiv\"\n      style={{\n        borderRight: 'solid',\n        marginRight: '5px',\n        paddingRight: '15px',\n      }}\n    >\n      <div style={{ textAlign: 'left' }} data-testid={'about-text-id'}>\n        Some folks work in water testing facilities that\n        <br />\n        utilize the Idexx QuantiTray&reg; System for their\n        <br />\n        quantifying analysis on water samples.\n        <br />\n        <br />\n        see link for more info:\n        <br />\n        <a\n          data-testid={'qtlink'}\n          style={{ color: 'teal' }}\n          href=\"https://www.idexx.com/en/water/water-products-services/quanti-tray-system/\"\n        >\n          https://www.idexx.com/en/water/water-products-services/quanti-tray-system/\n        </a>\n        <br />\n        <br />\n        To use the results of the incubator, a technician\n        <br />\n        will need to count the positive sample wells, and then\n        <br />\n        cross reference one of three PDF files with the\n        <br />\n        corresponding MPN and related 95% confidence range.\n        <br />\n        Here is a link to one of the files, the one for the <br />\n        <a\n          style={{ color: 'teal' }}\n          href=\"https://www.idexx.com/files/qt97mpntable.pdf\"\n        >\n          QuantiTray2000&reg;\n        </a>\n        , the largest one.\n        <br />\n        <br />\n        To be helpful, the MPN Generator was created.\n        <br />\n        <a\n          style={{ color: 'teal' }}\n          href=\"https://www.idexx.com/en/water/resources/mpn-generator/\"\n        >\n          https://www.idexx.com/en/water/resources/mpn-generator/\n        </a>\n        <br />\n        A Desktop solution to be installed on your Windows machine...\n        <br />\n        well you can read about it at that link for the revised version,\n        <br />\n        but a tl;dr summary would be that this particular software was written\n        <br />\n        without any planning, research, or demand, so that one engineer\n        <br />\n        could practice with Delphi C back in the 1990s.\n        <br />\n        This has been referred to in the past as &quot;Deanware&quot; at this\n        <br />\n        particular sales and manufacturing organization.\n        <br />\n        <br />\n        A decade after the buggy implementation was released to\n        <br />\n        the public - The confidence range values were coded in backwards,\n        <br />\n        the save drive was hardcoded as E: despite many people not having\n        <br />\n        an E: drive set up, etc...- the types of problems requirements\n        <br />\n        gathering, testing and debugging would have caught/prevented.\n        <br />\n        <br />\n        Anyway this is getting way too long so to cut short my justification\n        <br />\n        for writing this app other than learning to use React. This is a usable\n        <br />\n        implementation of that prior desktop app that needlessly overcomplicates\n        <br />\n        the task it is supposed to be helping with.\n        <br />\n        <br />\n        <div data-testid={'last-sentence-testid'}>\n          Hope this is useful to the three of you that need it.\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { getQtMpn } from 'mpn-lookup/mpn.lookup';\n\nexport default function QTForm() {\n  const [inCount, setInCount] = useState(0);\n\n  function mpn(inCount) {\n    let mpnList = [];\n    if (inCount >= 0 && inCount <= 51) {\n      mpnList = getQtMpn(inCount);\n    }\n    if (mpnList.length === 0) {\n      return (\n        <label data-testid={'empty-value-label'}>\n          Enter valid value please!\n        </label>\n      );\n    }\n\n    return (\n      <div>\n        <h5 data-testid={'qt-mpn-val'}>MPN: {mpnList[1]}</h5>\n        <label data-testid={'qt-conf-label'} style={{ color: '#61dafb' }}>\n          95% Confidence Range\n        </label>\n        <br />\n        <span data-test-id={'confidence-test-id'}>\n          Low: {mpnList[0]} -- High: {mpnList[2]}\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <label>\n      <label\n        id={'qt-title-label'}\n        data-testid={'qt-title-dataid'}\n        style={{ color: '#61dafb' }}\n      >\n        QuantiTray&reg;\n      </label>\n      <br />\n      <br />\n      {/* eslint-disable-next-line max-len */}\n      Enter Positive Well Count:{' '}\n      <input\n        name={'QTinput'}\n        id={'qtinput'}\n        value={inCount}\n        onChange={(e) => setInCount(parseInt(e.target.value))}\n        type=\"number\"\n        min=\"0\"\n        max=\"51\"\n        data-testid={'qt-input-dataid'}\n      />\n      <br />\n      {<div>{mpn(inCount)}</div>}\n    </label>\n  );\n}\n","import React, { useState } from 'react';\nimport { getQt2KMpn } from 'mpn-lookup/mpn.lookup';\n\nexport default function QTLForm() {\n  const [in2KL, setIn2KL] = useState(0);\n  const [in2KS, setIn2KS] = useState(0);\n\n  function mpn2K(in2KL, in2KS) {\n    let mpn2KList = [];\n    if (in2KL >= 0 && in2KL <= 49 && in2KS >= 0 && in2KS <= 48) {\n      mpn2KList = getQt2KMpn(in2KL, in2KS);\n    }\n\n    return (\n      <div>\n        <h5 data-testid={'qt2k-mpn-val'}>MPN: {mpn2KList[1]}</h5>\n        <label data-testid={'qt2k-conf-label'} style={{ color: '#61dafb' }}>\n          95% Confidence Range\n        </label>\n        <br />\n        <span>\n          Low: {mpn2KList[0]} -- High: {mpn2KList[2]}\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <label>\n        <label\n          id={'qt2k-title-label'}\n          data-testid={'qt2k-title-dataid'}\n          style={{ color: '#61dafb' }}\n        >\n          QuantiTray2000&reg;\n        </label>\n        <br />\n        <br />\n        {/* eslint-disable-next-line max-len */}\n        Enter Large Well Count:{' '}\n        <input\n          name={'QT2KLinput'}\n          id={'qt2klinput'}\n          value={in2KL}\n          onChange={(e) => setIn2KL(parseInt(e.target.value))}\n          type=\"number\"\n          min=\"0\"\n          max=\"49\"\n          size=\"5\"\n        />\n        <br />\n        {/* eslint-disable-next-line max-len */}\n        Enter Small Well Count:{' '}\n        <input\n          name={'QT2KSinput'}\n          id={'qt2ksinput'}\n          value={in2KS}\n          onChange={(e) => setIn2KS(parseInt(e.target.value))}\n          type=\"number\"\n          min=\"0\"\n          max=\"48\"\n          size=\"5\"\n        />\n        <br />\n        {<div>{mpn2K(in2KL, in2KS)}</div>}\n      </label>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { getQtLegio } from 'mpn-lookup/mpn.lookup';\n\nexport default function QT2KForm() {\n  const [inLarge, setInLarge] = useState(0);\n  const [inSmall, setInSmall] = useState(0);\n\n  function mpnL(inSmall, inLarge) {\n    let mpnLList = [];\n\n    if (inLarge >= 0 && inSmall >= 0 && inLarge <= 6 && inSmall <= 90) {\n      mpnLList = getQtLegio(inSmall, inLarge);\n    }\n    if (mpnLList.length === 0) {\n      return <h3>Enter valid value please!</h3>;\n    }\n\n    return (\n      <div>\n        <h5 data-testid={'qtl-mpn-val'}> MPN: {mpnLList}</h5>\n      </div>\n    );\n  }\n\n  return (\n    <label>\n      <label\n        id={'qtl-title-label'}\n        data-testid={'qtl-title-dataid'}\n        style={{ color: '#61dafb' }}\n      >\n        QuantiTray&reg; Legiolert\n      </label>\n      <br />\n      <br />\n      Enter Large Well Count:{' '}\n      <input\n        value={inLarge}\n        onChange={(e) => setInLarge(parseInt(e.target.value))}\n        type=\"number\"\n        min=\"0\"\n        max=\"6\"\n        style={{ marginLeft: '10px', width: '6%' }}\n        width=\"2.5em\"\n      />\n      <br />\n      Enter Small Well Count:{' '}\n      <input\n        value={inSmall}\n        onChange={(e) => setInSmall(parseInt(e.target.value))}\n        type=\"number\"\n        min=\"0\"\n        max=\"90\"\n        style={{ marginLeft: '10px', width: '6%' }}\n      />\n      <br />\n      {<div>{mpnL(inSmall, inLarge)}</div>}\n    </label>\n  );\n}\n","import AboutDiv from './AboutDiv';\nimport QTForm from './QTForm';\nimport QT2KForm from './QT2KForm';\nimport QTLForm from './QTLForm';\nimport React from 'react';\nimport '../styles/App.css';\n\nexport default function AppContainer() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h3 data-testid={'mpn-lookup-title'}>\n          MPN Lookup For QuantiTray&reg; Product Suite\n        </h3>\n      </header>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, 1fr)',\n          gridGap: 20,\n        }}\n      >\n        <div>\n          <h5 data-testid={'why-title-testid'}>Why does this even exist?</h5>\n          <AboutDiv />\n        </div>\n        <div style={{ paddingLeft: '5px', paddingTop: '60px' }}>\n          <QTForm />\n          <hr />\n          <QT2KForm />\n          <hr />\n          <QTLForm />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport AppContainer from './components/AppContainer';\n\nexport default function App() {\n  return <AppContainer />;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}